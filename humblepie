#!/usr/bin/env bash
# vim: ft=sh sw=2 sts=2 et
#######################################################################
### v0.4.3
### Copyright (c) 2012 Josh McGee
###
### Permission is hereby granted, free of charge, to any person
### obtaining a copy of this software and associated documentation
### files (the "Software"), to deal in the Software without
### restriction, including without limitation the rights to use, copy,
### modify, merge, publish, distribute, sublicense, and/or sell copies
### of the Software, and to permit persons to whom the Software is
### furnished to do so, subject to the following conditions:
###
### The above copyright notice and this permission notice shall be
### included in all copies or substantial portions of the Software.
###
### THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
### EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
### OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
### NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
### BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
### ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
### CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
### SOFTWARE.
###
#######################################################################

## comments starting with a single octothorpe are experimental code
## more than one octothorpe signifies detail or instructional comments
## all lines are 72cols or less, except printf statements

set -e
shopt -s extglob
version="v0.4.3"

messaging() {
  if (( verbose > 0 )); then
    verbose() {
      ## ERROR: return 1; else return 0
      printf "==> %s\n" "$1" "${@:2}"
      [[ "$1" != "ERROR:" ]] || ret=1
    } >&2
    broken() { true; } &>/dev/null
  else
    broken() {
      ## broken() always returns 1 because we _probably_ want to exit
      printf "==> %s\n" "Something is wrong..." \
        "Try again with -v." "PROBLEM:" "$1" "${@:2}"
      ret=1
    } >&2
    verbose() { true; } &>/dev/null
  fi
}

check_root() {
  if (( EUID != 0 )); then
    return
  else
    verbose=1
    messaging
    dir_rc="/etc/humblepie"
    (( asroot > 0 )) || verbose "ERROR" "Running as root requires -r!"
  fi
}

check_dir() {
  [[ "$dir_rc" ]] || dir_rc="${HOME}/.config/humblepie"
  dir_rc="${dir_rc%/}"
  rcfile="${dir_rc}/humblepie.rc"
  if [[ -f "$rcfile" ]]; then
    . "$rcfile"
  else
    echo "No config found"
  fi

  dir_hib="${dir_hib:-$PWD}"
  [[ ! -d "$dir_hib" ]] && mkdir -p "$dir_hib"

  if [[ ! -w "${dir_hib}" ]]; then
    broken "Destination invalid"
    verbose "ERROR" "Specify a download directory in $rcfile," \
      "or with -d <dir>."
  fi
}

## kudos to Riviera on #bash for help with this one o/
generate_list() {
  IFS='|'; local expatt="*+(${exclude[@]})*" spatt="*+(${search[@]})*"
  unset IFS links list link dl
  local game; declare -Ag links dest; declare -ag list

  for k in "${keys[@]}"; do
    while read -r _ link; do
      if [[ "$link" == *@(downloads|files.)* ]]; then
        if [[ "${exclude[@]}" ]]; then
          [[ "${link,,}" == ${expatt,,} ]] && continue || true
        fi
        if [[ "${search[@]}" ]]; then
          [[ "${link,,}" == ${spatt,,} ]] && true || continue
        fi
        list+=("$link")
      fi
    done < <(links -html-numbered-links 1 -dump \
                  "https://www.humblebundle.com/downloads?key=$k")
  done

  if [[ -z "${list[@]}" ]]; then
    broken "Failed to find any valid downloads."
    verbose "ERROR:" "No downloads could be found." \
      "Verify that a valid key was specified with -k," \
      "properly configured in $rcfile or," \
      "that your search pattern was spelled correctly."
  fi
  (( ret != 1 ))

  for dl in "${list[@]}"; do
    if [[ "$dl" == *files* ]]; then
      file="${dl#*files*/}"
      file="${file%%\?*}"
      links["$file"]="$dl"
    fi
  done

}

user_list() {
  unset downloads; declare -Ag dest; declare -ag downloads
  PS3="Select files by number, continue with 0: "

  select choice in "${!links[@]}"; do
    [[ "$choice" ]] || break
    downloads+=("$choice")
    dest[$choice]="${dir_hib}/${downloads[@]:(-1)}"
  done
  if [[ -z "${downloads[@]}" ]]; then
    verbose "WARNING:" "No download specified."
    exit
  fi
}

auto_dl_game () {

  case "$1" in
    single) ## array abuse so i can reuse the existing ones
      downloads[0]="$hib_game"
      dest["$hib_game"]="${dir_hib}/$hib_game"
    ;;
    *) ## present the entire list
      user_list
    ;;
  esac

  for fn in "${downloads[@]}"; do
    if [[ -f "${dest[$fn]}" ]]; then
      verbose "WARNING:" "$fn already exists! Skipping..."
    else
      verbose "INFO:" "Downloading $fn..."
      curl -# -o "${dest[$fn]}" "${links[$fn]}" &&
        verbose "INFO:" "Finished downloading ${fn}!"
    fi
  done

  (( check_md5 == 0 )) || check_sum
}

check_sum() {
  unset md5 sums dl; local md5; declare -a sums

  for dl in "${list[@]}"; do
    if [[ "$dl" == *#* ]]; then
      cksum="${dl#*#}"
      [[ "$cksum" ]] && sums+=("$cksum")
    fi
  done

  for file in "${downloads[@]}"; do
    md5="$(md5sum <"${dir_hib}/$file")"
    md5="${md5%% *}"
    for sum in "${sums[@]}"; do
      [[ "${md5^^}" == "${sum^^}" ]] && {
        success="1"
        verbose "INFO:" "The md5 for ${dir_hib}/$file is okay!"
        break
      }
    done
    if (( success < 1 )); then
      broken "Checksums did not match."
      verbose "WARNING:" "The md5 for ${dir_hib}/$file ($md5) did not check out!"
    fi
  done
}

usage() {
  printf "humblepie %s\n\n" "$version"
  printf "Configuration file: ~/.config/humblepie/humblepie.rc\n"
  printf -- "Usage: %s [options]\n\n" "${0##*/}"
  printf -- "Options:\n"
  printf -- " -b <name>   Choose the bundle specified in config\n"
  printf -- " -C <path>   Specify an alternate config file\n"
  printf -- " -d <dir>    Set the download directory\n"
  printf -- " -e <term>   Case-insensitive patterns to exclude results\n"
  printf -- " -f <file>   Specify a file to download: must be full filename\n"
  printf -- " -k <key>    Specify a key manually: overrides -b\n"
  printf -- " -s <term>   Case-insensitive search for files in bundle\n"
  printf -- " -a          Search all bundles with a configured key\n"
  printf -- " -c          Enable md5 checking\n"
  printf -- " -h          Print this help\n"
  printf -- " -r          Enable operation as root, for system-wide installations *NOT RECOMMENDED*\n"
  printf -- " -v          Turn on verbose reporting for info, warnings, errors\n\n"
  printf -- "     EXAMPLES:\n\n"
  printf -- "     Using hibkey_5, set download directory to ${HOME}/hib and search for \`psycho':\n"
  printf -- "     %s -b 5 -d ${HOME}/hib -s psycho\n\n" "${0##*/}"
  printf -- "     Using bundle key 0a1b2c3d, download amnesia_tdd-1.2.1-3.sh without prompting:\n"
  printf -- "     %s -k 0a1b2c3d -f amnesia_tdd-1.2.1-3.sh\n\n" "${0##*/}"
  printf -- "     SEARCHING:\n"
  printf -- "     Search and exclusion patterns are comma-delimited. Results will be filtered accordingly.\n\n"
  printf -- "     Multiple patterns when searching:\n"
  printf -- "     Bundles, keys, search and exlude patterns may all be specified as comma-delimited strings.\n"
  printf -- "     Specifying any of these twice is accepted, provided you use a pipe ('|').\n"
  printf -- "     Due to the special meaning of the pipe symbol, backslash escaping or single-quoting is required.\n\n"
  printf -- "     %s -b 3,4,botanicula -s super,runner -e mp3,flac -e 'rpm|deb|exe' -s dmg\|tar\n" "${0##*/}"
}

run() {
    OPTIND=1
    while getopts ":b:C:d:e:f:k:s:achrv" opt; do
      case "$opt" in
        \?) ## usage, exit with error
          echo "Invalid option specified." >&2
          usage
          return 1
        ;;
        h) ## print usage
          usage
          exit
        ;;
        v) ## enable verbosity
          verbose=1
        ;;
        r) ## turn on root, for systemwide installs
          asroot=1
        ;;
        C) ## set location to config file
          unset rcfile
          rcfile="$OPTARG"
          . "$rcfile"
        ;;
        d) ## set the download dir
          unset dir_hib
          dir_hib="${OPTARG}"
        ;;
        b) ## just pick the bundle with the rcfile
          check_dir
          IFS=, read -ra hibkeys <<<"$OPTARG"
          for bundle in "${hibkeys[@]}"; do
            bundles+=("hibkey_$bundle")
          done
          for k in "${bundles[@]}"; do
             keys+=("${!k}")
          done
        ;;
        k) ## specify a key manually
          IFS=, read -ra keys <<<"$OPTARG"
        ;;
        a) ## all bundles
          unset hib_key
          hib_all=1
        ;;
        f) ## pick a game to download
          unset dl_arg hib_game
          dl_arg="single"
          hib_game="$OPTARG"
        ;;
        s) ## case insensitive searching
          unset hib_game
          if [[ "${search[@]}" ]]; then
            search+=("$OPTARG")
          else
            IFS=, read -ra search <<<"$OPTARG"
          fi
        ;;
        e) ## exclusion from search
          unset hib_game
          if [[ "${exclude[@]}" ]]; then
            exclude+=("$OPTARG")
          else
            IFS=, read -ra exclude <<<"$OPTARG"
          fi
        ;;
        c) ## check_game should verify md5
          check_md5=1
        ;;
      esac
    done

    messaging
    check_root
    [[ "$rcfile" ]] || check_dir
    if [[ "$hib_all" ]]; then
      for k in "${!hibkey_@}"; do
        keys+=("${!k}")
      done
    fi
    generate_list
    auto_dl_game "$dl_arg"
}

if [[ -z "$@" ]]; then
  usage && exit 1
fi
run "$@"
